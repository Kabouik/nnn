#!/usr/bin/env sh

# Description: Add selection or hovered file/directory to cmus queue.
# If adding selection, files/dirs are added in the same order they were selected in nnn.
# cmus will be started in a new window if not already running and playback will start immediately.
# If cmus is already running, files will just be appended to the queue (no forced playback).
#
# Todo: Add cava as optional dependency
#
<<<<<<< HEAD
# Dependencies: cmus, pgrep, xdotool (optional)
# Shell: POSIX compliant
# Author: Kabouik

# (Optional) Set preferred terminal emulator for cmus if not set in your env,
# or leave commented out to use OS default
=======
# Dependencies: cmus
# Shell: POSIX compliant
# Author: Kabouik

# User variables
# Set desired delay to let cmus start in a new terminal;
# this value is conservative so lower it if your machine is fast
delay="1.5"
# (Optionak) Set preferred terminal emulator if not set in your env,
# or leave commented to use default
>>>>>>> a3f0c79d5ff4f7f8725a2c8715dcc1f44f4551c2
#TERMINAL="kitty"

# Required variables
selection=${NNN_SEL:-${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.selection}
REPLY=c

<<<<<<< HEAD
start_cmus() {
    if [ -x "$(command -v xdotool)" ]; then
        nnnwindow="$(xdotool getactivewindow)"
    fi
    printf "cmus is not running, starting it in a new %s window.\n" "$TERMINAL"
    (case "$TERMINAL" in
        kitty | gnome-terminal | st)
            nohup "$TERMINAL" -- cmus >/dev/null 2>&1 &
            ;;
        havoc)
            nohup "$TERMINAL" cmus >/dev/null 2>&1 &
            ;;
        "")
            nohup x-terminal-emulator -e cmus >/dev/null 2>&1 &
            ;;
        *)
            nohup "$TERMINAL" -e cmus >/dev/null 2>&1 &
            ;;
    esac)
    until [ -n "$cmuspid" ]; do # Give the new terminal some time to open
        cmuspid="$(pgrep cmus)"; sleep 0.20
    done
    if [ -x "$(command -v xdotool)" ]; then
        xdotool windowactivate "$nnnwindow"
    fi
}

# If active selection,then  ask what to do
=======
# If active selection, ask what to do
>>>>>>> a3f0c79d5ff4f7f8725a2c8715dcc1f44f4551c2
if [ -s "$selection" ]; then
    printf "Queue [s]election or [c]urrently hovered? [default=c]: "
    read -r REPLY
fi

<<<<<<< HEAD
# If [s]election, then start cmus in new window (if necessary) and append selection to queue
if [ "$REPLY" = "s" ]; then
    if ! pgrep cmus >/dev/null; then
        start_cmus
        # Queue, change view and play
        cmus-remote -C "view 4"; xargs < "$selection" -0 cmus-remote -q; cmus-remote -p; unset cmuspid
    else
        # Queue in existing cmus if already running and change view
        printf "Appending files to current cmus queue"
        cmus-remote -C "view 4"; xargs < "$selection" -0 cmus-remote -q
    fi
=======
# If selection, start cmus in new window (if necessary) and append selection to queue
if [ "$REPLY" = "s" ]; then
    if [ "$(pgrep cmus)" = "" ]; then
        printf "cmus is not running, starting it in a new window."
        case "$TERMINAL" in
            kitty | gnome-terminal | st)
                nohup "$TERMINAL" -- cmus > /dev/null 2>&1 &
                cmuspid=$!
                ;;
            havoc)
                nohup "$TERMINAL" cmus > /dev/null 2>&1 &
                cmuspid=$!
                ;;
            "")
                nohup x-terminal-emulator -e cmus > /dev/null 2>&1 &
                cmuspid=$!
                ;;
            *)
                nohup "$TERMINAL" -e cmus > /dev/null 2>&1 &
                cmuspid=$!
                ;;
        esac
        until [ -n "$cmuspid" ]; do # Give the new terminal some time to open
            sleep 0.25
        done
        # Give cmus some extra time to fully start, then queue, change view and play
        sleep "$delay"; cmus-remote -C "view 4"; xargs < "$selection" -0 cmus-remote -q; cmus-remote -p; unset cmuspid
    else
        # Queue in existing cmus if already running
        printf "Appending files to current cmus queue"
        cmus-remote -C "view 4"; xargs < "$selection" -0 cmus-remote -q
    fi

>>>>>>> a3f0c79d5ff4f7f8725a2c8715dcc1f44f4551c2
    # Clear selection
    if [ -p "$NNN_PIPE" ]; then
        printf "-" > "$NNN_PIPE"
    fi

<<<<<<< HEAD
# If [c]urrent, then start cmus in new window (if necessary) and append hovered file or directory to queue
elif [ -n "$1" ]; then
    if ! pgrep cmus >/dev/null; then
        start_cmus
        # Queue, change view and play
        cmus-remote -C "view 4"; cmus-remote -q "$1"; cmus-remote -p; unset cmuspid
    else
        # Queue in existing cmus if already running and change view
        printf "Appending '%s' to current cmus queue" "$1"
        cmus-remote -C "view 4"; cmus-remote -q "$1"
    fi
=======
# If current, start cmus in new window (if necessary) and append hovered file or dir to queue
elif [ -n "$1" ]; then
    if [ "$(pgrep cmus)" = "" ]; then
        printf "cmus is not running, starting it in a new window."
        case "$TERMINAL" in
            kitty | gnome-terminal | st)
                nohup "$TERMINAL" -- cmus > /dev/null 2>&1 &
                cmuspid=$!
                ;;
            havoc)
                nohup "$TERMINAL" cmus > /dev/null 2>&1 &
                cmuspid=$!
                ;;
            "")
                nohup x-terminal-emulator -e cmus > /dev/null 2>&1 &
                cmuspid=$!
                ;;
            *)
                nohup "$TERMINAL" -e cmus > /dev/null 2>&1 &
                cmuspid=$!
                ;;
        esac
        until [ -n "$cmuspid" ]; do # Give the new terminal some time to open
            sleep 0.25
        done
        # Give cmus some extra time to fully start, then queue, change view and play
        sleep "$delay"; cmus-remote -C "view 4"; cmus-remote -q "$1"; cmus-remote -p; unset cmuspid
    else
        # Queue in existing cmus if already running
        printf "Appending '%s' to current cmus queue" "$1"
        cmus-remote -C "view 4"; cmus-remote -q "$1"
    fi

>>>>>>> a3f0c79d5ff4f7f8725a2c8715dcc1f44f4551c2
fi
